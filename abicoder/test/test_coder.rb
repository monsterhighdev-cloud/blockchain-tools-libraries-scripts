##
#  to run use
#     ruby -I ./lib -I ./test test/test_coder.rb


require 'helper'


class TestCoder < MiniTest::Test


def test_encode

  types = [ 'uint256', 'string' ]
  args  = [ 1234, 'Hello World' ]
  data =  hex'00000000000000000000000000000000000000000000000000000000000004d2'+
               '0000000000000000000000000000000000000000000000000000000000000040'+
               '000000000000000000000000000000000000000000000000000000000000000b'+
               '48656c6c6f20576f726c64000000000000000000000000000000000000000000'

  assert_equal data, ABI.encode( types, args )


  types = [ 'uint256[]', 'string' ]
  args  = [ [1234, 5678] , 'Hello World' ]
  data = hex'0000000000000000000000000000000000000000000000000000000000000040'+
               '00000000000000000000000000000000000000000000000000000000000000a0'+
               '0000000000000000000000000000000000000000000000000000000000000002'+
               '00000000000000000000000000000000000000000000000000000000000004d2'+
               '000000000000000000000000000000000000000000000000000000000000162e'+
               '000000000000000000000000000000000000000000000000000000000000000b'+
               '48656c6c6f20576f726c64000000000000000000000000000000000000000000'

  assert_equal data, ABI.encode( types, args )

  types = [ 'uint256', '(uint256,string)']
  args = [1234, [5678, 'Hello World']]
  data = hex'00000000000000000000000000000000000000000000000000000000000004d2'+
          '0000000000000000000000000000000000000000000000000000000000000040'+
          '000000000000000000000000000000000000000000000000000000000000162e'+
          '0000000000000000000000000000000000000000000000000000000000000040'+
          '000000000000000000000000000000000000000000000000000000000000000b'+
          '48656c6c6f20576f726c64000000000000000000000000000000000000000000'

   assert_equal data, ABI.encode( types, args )
end


def test_decode
  types = [ 'uint256', 'string' ]
  args = [1234, 'Hello World']
  data = hex'00000000000000000000000000000000000000000000000000000000000004d2'+
           '0000000000000000000000000000000000000000000000000000000000000040'+
           '000000000000000000000000000000000000000000000000000000000000000b'+
           '48656c6c6f20576f726c64000000000000000000000000000000000000000000'

  assert_equal  args, ABI.decode( types, data )


  types = [ 'uint256[]', 'string' ]
  args = [[1234, 5678], 'Hello World']
  data = hex'0000000000000000000000000000000000000000000000000000000000000040'+
            '00000000000000000000000000000000000000000000000000000000000000a0'+
          '0000000000000000000000000000000000000000000000000000000000000002'+
          '00000000000000000000000000000000000000000000000000000000000004d2'+
          '000000000000000000000000000000000000000000000000000000000000162e'+
          '000000000000000000000000000000000000000000000000000000000000000b'+
          '48656c6c6f20576f726c64000000000000000000000000000000000000000000'

  assert_equal args, ABI.decode( types, data )


  types = [ 'uint256', '(uint256,string)']
  args = [1234, [5678, 'Hello World']]
   data = hex'00000000000000000000000000000000000000000000000000000000000004d2'+
          '0000000000000000000000000000000000000000000000000000000000000040'+
          '000000000000000000000000000000000000000000000000000000000000162e'+
          '0000000000000000000000000000000000000000000000000000000000000040'+
          '000000000000000000000000000000000000000000000000000000000000000b'+
          '48656c6c6f20576f726c64000000000000000000000000000000000000000000'

   assert_equal args, ABI.decode( types, data )


   types = ['uint256', '(address,uint256)[]', 'string']
   args  =  [66,
             [['18a475d6741215709ed6cc5f4d064732379b5a58', 1]],
               'QmWBiSE9ByR6vrx4hvrjqS3SG5r6wE4SRq7CP2RVpafZWV']
   data = hex'0000000000000000000000000000000000000000000000000000000000000042'+
             '0000000000000000000000000000000000000000000000000000000000000060'+
             '00000000000000000000000000000000000000000000000000000000000000c0'+
             '0000000000000000000000000000000000000000000000000000000000000001'+
             '00000000000000000000000018a475d6741215709ed6cc5f4d064732379b5a58'+
             '0000000000000000000000000000000000000000000000000000000000000001'+
             '000000000000000000000000000000000000000000000000000000000000002e'+
             '516d57426953453942795236767278346876726a715333534735723677453453'+
             '52713743503252567061665a5756000000000000000000000000000000000000'
   assert_equal args, ABI.decode( types, data )
end


def test_codec
     tests = [
      { types: ['uint256'],
        args:  [98127491] },
      { types: [ 'uint256', 'string' ],
        args:  [1234,
                'Hello World'] },
      { types: [ 'uint256[]', 'string' ],
        args:  [ [1234, 5678] ,
                 'Hello World' ] },
      ## note:  address gets decoded as a hex(adecimal string) without leading 0x
      ##           e.g. 'cd2a3d9f938e13cd947ec05abc7fe734df8dd826'
      { types: [ 'uint256', 'address' ],
        args: [ 324124,
                'cd2a3d9f938e13cd947ec05abc7fe734df8dd826' ] },
      { types: ['uint256',
                'uint32[]',
                'bytes10',
                'bytes'],
        args: [291,
               [1110,1929],
               '1234567890'.b,
               'Hello, world!'.b] },
      ### tuples
      { types: [ 'uint256', '(uint256,string)'],
         args: [1234,
                [5678, 'Hello World']] },
      { types: ['uint256', '(address,uint256)[]', 'string'],
        args: [66,
                [['18a475d6741215709ed6cc5f4d064732379b5a58', 1]],
                  'QmWBiSE9ByR6vrx4hvrjqS3SG5r6wE4SRq7CP2RVpafZWV'] },
    ]


    tests.each do |test|
         types = test[:types]
         args  = test[:args]
         assert_equal args, ABI.decode( types, ABI.encode( types, args ))
    end
end


end  ## class TestCoder

